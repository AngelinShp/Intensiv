<?php
	// Определяем пространство имён MyDB\CRUD
	namespace MyDB\CRUD;
	// Подключаем файл MySQL.php
	include_once('MySQL.php');
	// Создаём класс CRUD для выполнения операций CRUD с БД
	class CRUD {
		// Определяем приватные переменные $db и $table для хранения экземпляра класса MySQL (для работы с БД) и имени текущей таблицы 
		private $db; // БД
		private $table; // Текущая таблица
		// Определяем конструктор класса CRUD, который принимает параметры $config (настроек подключения к БД) и $table (имя таблицы, с которой будем работать)
		public function __construct($config, $table) {
			// Создаём экземпляр класса MySQL и сохраняем в свойстве $db, используя переданные параметры подключения
			$this->db = new \MyDB\MySQL(
				$config['host'], 
				$config['user'], 
				$config['pass'], 
				$config['db']
			);
			// Имя таблицы сохраняем в свойстве $table
			$this->table = $table;
		}
		// Метод create() используем для добавления новой записи в таблицу
		public function create($data) {
			if(empty($data)) {
				// Если переданный массив пуст, то прекращаем выполнение кода 
				exit;
			}
			// Формируем SQL-запрос для вставки данных (строки) в таблицу
			// Сначала формируем часть запроса, указывающую на таблицу и столбцы: INSERT INTO table_name (столбец1, столбец2, ...) 
			$sql = 'INSERT INTO ' . $this->table .' (';
			// Затем в цикле перебираем ключи массива $data (названия столбцов) и добавляем в запрос с обратными кавычками (``), чтобы SQL точно нас «понял» 
			foreach(array_keys($data) as $d) {
				$sql .= '`' . $d . '`, ';
			}
			// Удаляем два последних символа: запятую и пробел
			$sql = substr($sql, 0, -2); 
			// Далее формируем часть запроса, указывающую на значения для вставки: VALUES (значение1, значение2, ...)
			$sql .= ') VALUES (';
			// В цикле перебираем значения массива $data и добавляем в запрос
			foreach($data as $d) {
				if(empty($d)) {
					// Если значение пустое, то вставляем NULL
					$sql .= 'NULL, ';
				// Иначе – значение заключаем в одинарные кавычки ('')
				} else {
					$sql .= '\'' . $d . '\', ';
				}
			}
			// В конце строки запроса снова удаляем последнюю запятую и пробел
			$sql = substr($sql, 0, -2);
			$sql .= ')';
			// Запрос выполняем с помощью метода request() объекта БД $db
			$this->db->request($sql); 
		}

		// Используем приватные методы equale($val), where($val) и set($val)
		// для генерации частей SQL-запросов, где $val представляет собой
		// ассоциативный массив с одним ключом и значением

		// Методом equale() возвращаем строку, в которой ключ и значение 
		// из массива $val соединены оператором равенства =
		private function equale($val) {
			return array_keys($val)[0] . '=' . array_values($val)[0];
			print_r($val);
		}
		// Методом where() возвращаем строку, в которой формируем условие WHERE для SQL-запроса, используя метод equale(). Это позволяет указать, какие записи должны быть выбраны или обновлены в запросе
		private function where($val) {
			return ' WHERE ' . $this->equale($val);
		}
		// Методом set() возвращаем строку, в которой формируем часть SET для SQL-запроса, используя метод equale(). Это позволяет указать, какие столбцы и значения должны быть обновлены в запросе UPDATE
		private function set($val) {
			return ' SET ' . $this->equale($val);
		}
		// Метод read() используем для выполнения операции SELECT и извлечения данных из таблицы
		public function read($key) {
			// Формируем SQL-запрос, 
			$sql = 'SELECT * FROM ' 
			// в котором указываем таблицу ($this->table)
			. $this->table 
			// и условие WHERE, используя метод where($key), где $key представляет собой ассоциативный массив с одним ключом и значением
			. $this->where($key);
			// Запрос выполняем с помощью метода request() объекта БД $db и возвращаем результат
			return $this->db->request($sql);
		}
		// Метод update($key, $value) используем для выполнения операции UPDATE и обновления существующих записей в таблице, где $key и $value – ассоциативные массивы с одним ключом и значением 
		public function update($key, $value) {
			// Формируем SQL-запрос,
			$sql = 'UPDATE ' 
			// в котором указываем таблицу ($this->table)
			. $this->table 
			// часть SET, используя метод set($value)
			. $this->set($value) 
			// и условие WHERE, используя метод where($key)
			. $this->where($key);
			// Запрос выполняем с помощью метода request() объекта БД $db
			$this->db->request($sql);
		}
        // Метод delete($key) используем для выполнения операции DELETE и удаления записей в таблице, 
        // где $key – ассоциативный массив с одним ключом и значением
        public function delete($key) {
            // Формируем SQL-запрос,
            $sql = 'DELETE FROM ' 
            // в котором указываем таблицу ($this->table)
            . $this->table 
            // и условие WHERE, используя метод where($key)
            . $this->where($key);
            // Запрос выполняем с помощью метода request() объекта БД $db
            $this->db->request($sql);
        }
	}
?>